{"meta":{"title":"Don't forget","subtitle":"lazy","description":null,"author":"Hae Jin","url":"http://yoursite.com"},"pages":[],"posts":[{"title":"Ojdbc_1_0821","slug":"jdbcEx-180821","date":"2018-08-22T14:23:12.000Z","updated":"2018-08-22T15:28:31.183Z","comments":true,"path":"2018/08/22/jdbcEx-180821/","link":"","permalink":"http://yoursite.com/2018/08/22/jdbcEx-180821/","excerpt":"","text":"Emp는 DTO클래스로 따로 만들었다. (사용 필드, toString, getter/setter) ** PreparedStatement 사용 : 더 안전하고 활용도 큼 -&gt; Statement 대신 이걸로 쓰기! DAO 패키지123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384package ojdbc;import java.sql.Connection;import java.sql.DriverManager;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.ArrayList;import java.util.List;import dto.Emp;public class OjdbcEx_04 &#123; // OJDBC DRIVER private static final String DRIVER = \"oracle.jdbc.driver.OracleDriver\"; // DB 연결 정보 private static final String URL = \"jdbc:oracle:thin:@localhost:1521:xe\"; private static final String USERNAME = \"scott\"; private static final String PASSWORD = \"tiger\"; // OJDBC 객체 private static Connection conn; // DB 연결객체 private static PreparedStatement ps; // SQL 수행객체 private static ResultSet rs; // 조회결과 public static void main(String[] args) &#123; try &#123; Class.forName(DRIVER); &#125; catch (ClassNotFoundException e) &#123; e.printStackTrace(); &#125; // ?없어도 PreparedStatement 사용가능 String sql = \"SELECT * FROM emp WHERE job = ? ORDER BY empno\"; try &#123; conn = DriverManager.getConnection(URL, USERNAME, PASSWORD); ps = conn.prepareStatement(sql); // SQL의 첫번째 ? 에 데이터를 넣는다 ps.setString(1, \"SALESMAN\"); // SQL 쿼리 수행 rs = ps.executeQuery(); // 쿼리 결과를 담은 List List&lt;Emp&gt; list = new ArrayList&lt;&gt;(); // 쿼리 결과 list 에 담기 while(rs.next()) &#123; //데이터가 없으면 false // 매번 emp 객체 생성해서 해당 객체를 list 에 넣는다 Emp emp = new Emp(); emp.setEmpno(rs.getInt(\"empno\")); emp.setEname(rs.getString(\"ename\")); emp.setJob(rs.getString(\"job\")); emp.setMgr(rs.getInt(\"mgr\")); emp.setHiredate(rs.getDate(\"hiredate\")); emp.setSal(rs.getInt(\"sal\")); emp.setComm(rs.getInt(\"comm\")); emp.setDeptno(rs.getInt(\"deptno\")); list.add(emp); &#125; // 쿼리 결과 출력 for( Emp e : list) &#123; System.out.println(e); &#125; &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; finally &#123; try &#123; rs.close(); ps.close(); conn.close(); &#125; catch (SQLException e) &#123; e.printStackTrace(); &#125; &#125; &#125;&#125;","categories":[{"name":"Programing","slug":"Programing","permalink":"http://yoursite.com/categories/Programing/"},{"name":"JDBC","slug":"Programing/JDBC","permalink":"http://yoursite.com/categories/Programing/JDBC/"}],"tags":[{"name":"PreparedStatement","slug":"PreparedStatement","permalink":"http://yoursite.com/tags/PreparedStatement/"},{"name":"DAO","slug":"DAO","permalink":"http://yoursite.com/tags/DAO/"},{"name":"DTO","slug":"DTO","permalink":"http://yoursite.com/tags/DTO/"}]},{"title":"DAO & DTO","slug":"DAODTO","date":"2018-08-22T13:26:20.000Z","updated":"2018-08-22T14:38:32.903Z","comments":true,"path":"2018/08/22/DAODTO/","link":"","permalink":"http://yoursite.com/2018/08/22/DAODTO/","excerpt":"","text":"DTO, Data Transmission Object(프레임워크 단에서 주로 쓰이는 용어) 데이터 전송 객체 VO (Value Object) 계층간 데이터 교환을 위한 자바 클래스( Java Beans: , JAVA EE(EnterPrise : 웹이나 대규모 플젝할 때 쓰임, (JAVA SE (기본))) - 이쪽에서 주로 사용하는 용어) DTO 클래스 명은 테이블의 이름과 같게 하는 것이 좋다 멤버 필드는 모두 private(데이터베이스 테이블의 컬럼명과 같게 하는 것이 좋다) 메소드는 getter, setter, toString() 만 작성 ** VO : 데이터로만 이뤄진 객체 &nbsp;&nbsp;&nbsp;&nbsp;DTO : VO 랑 거의 같은 의미. 전송을 목적으로 했을 때 DTO 라고 씀 DAO, Data Access Object Database의 데이터에 접근하기 위한 객체 데이터베이스에 수행할 SQL 문을 하나의 메소드의 기능으로 구현하여 모아놓은 객체","categories":[{"name":"Programing","slug":"Programing","permalink":"http://yoursite.com/categories/Programing/"},{"name":"JDBC","slug":"Programing/JDBC","permalink":"http://yoursite.com/categories/Programing/JDBC/"}],"tags":[{"name":"DAO","slug":"DAO","permalink":"http://yoursite.com/tags/DAO/"},{"name":"DTO","slug":"DTO","permalink":"http://yoursite.com/tags/DTO/"}]},{"title":"FirstPost","slug":"FirstPost","date":"2018-08-22T05:22:37.000Z","updated":"2018-08-22T11:48:44.304Z","comments":true,"path":"2018/08/22/FirstPost/","link":"","permalink":"http://yoursite.com/2018/08/22/FirstPost/","excerpt":"","text":"테스트 포스트Upload first post!","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2018-08-21T13:18:57.021Z","updated":"2018-08-21T13:18:57.022Z","comments":true,"path":"2018/08/21/hello-world/","link":"","permalink":"http://yoursite.com/2018/08/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}